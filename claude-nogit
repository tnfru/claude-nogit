#!/bin/bash

# claude-nogit - Run Claude in a safe container without git access
# Usage: claude-nogit [options] [project-directory]
#   --full    Include node_modules/.venv (slower but complete)
#   -h        Show help

set -e

# Parse arguments
FULL_COPY=false
INTERACTIVE=false
SHOW_DIFF=false
PROJECT_DIR=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --full)
            FULL_COPY=true
            shift
            ;;
        --interactive)
            INTERACTIVE=true
            shift
            ;;
        --show-diff)
            SHOW_DIFF=true
            shift
            ;;
        -h|--help)
            echo "claude-nogit - Run Claude Code in a safe container without git access"
            echo "Usage: claude-nogit [options] [project-directory]"
            echo ""
            echo "Options:"
            echo "  --full         Include node_modules/.venv (slower but complete)"
            echo "  --interactive  Prompt before copying changes back (old behavior)"
            echo "  --show-diff    Show diff review before auto-copying"
            echo "  -h             Show help"
            echo ""
            echo "If no directory is specified, uses current directory (.)"
            echo "By default excludes .git and large dependency dirs for speed"
            echo "Changes are automatically copied back unless --interactive is used"
            exit 0
            ;;
        *)
            PROJECT_DIR="$1"
            shift
            ;;
    esac
done

# Configuration
PROJECT_DIR="${PROJECT_DIR:-.}"
PROJECT_DIR="$(cd "$PROJECT_DIR" && pwd)"  # Convert to absolute path
SAFE_WORKSPACE="/tmp/claude-workspace-$$"
CONTAINER_IMAGE="claude-code-dev"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Validate project directory
if [ ! -d "$PROJECT_DIR" ]; then
    echo -e "${RED}Error: Directory '$PROJECT_DIR' does not exist${NC}"
    exit 1
fi

# Cleanup function for proper signal handling
cleanup() {
    local exit_code=$?
    
    # If container is still running, stop it
    if docker ps -q --filter "name=claude-safe-$$" >/dev/null 2>&1; then
        echo -e "\n${YELLOW}Stopping container...${NC}"
        docker stop claude-safe-$$ >/dev/null 2>&1 || true
    fi
    
    # Sync project sessions back to main .claude
    if [ -d "$ISOLATED_CLAUDE/projects/$PROJECT_NAME" ] && [ "$(ls -A "$ISOLATED_CLAUDE/projects/$PROJECT_NAME" 2>/dev/null)" ]; then
        echo -e "${YELLOW}Saving project sessions...${NC}"
        mkdir -p "$HOME/.claude/projects/$PROJECT_NAME"
        cp -r "$ISOLATED_CLAUDE/projects/$PROJECT_NAME"/. "$HOME/.claude/projects/$PROJECT_NAME/" 2>/dev/null || true
    fi
    
    # Clean up temporary directories
    if [ -n "$SAFE_WORKSPACE" ] && [ -d "$SAFE_WORKSPACE" ]; then
        rm -rf "$SAFE_WORKSPACE" 2>/dev/null || true
    fi
    
    if [ -n "$ISOLATED_CLAUDE" ] && [ -d "$ISOLATED_CLAUDE" ]; then
        rm -rf "$ISOLATED_CLAUDE" 2>/dev/null || true
    fi
    
    exit $exit_code
}

# Set up signal handlers
trap cleanup SIGINT SIGTERM EXIT

echo -e "${GREEN}=== Safe Claude Code Runner ===${NC}"
echo -e "Project: $PROJECT_DIR"
echo -e "Safe workspace: $SAFE_WORKSPACE"
echo

# Build exclusion list
EXCLUDES="--exclude='.git/'"

if [ "$FULL_COPY" = false ]; then
    echo -e "${YELLOW}Fast mode: Excluding large dependency directories${NC}"
    EXCLUDES="$EXCLUDES --exclude='node_modules' --exclude='.venv' --exclude='__pycache__' --exclude='*.pyc'"
else
    echo -e "${YELLOW}Full mode: Including all dependencies (may be slow)${NC}"
fi

# Create clean copy
echo -e "${YELLOW}Creating clean workspace...${NC}"
eval rsync -av $EXCLUDES \
  --exclude='.DS_Store' \
  "$PROJECT_DIR/" "$SAFE_WORKSPACE/"

# Create isolated .claude directory for this project
ISOLATED_CLAUDE="$SAFE_WORKSPACE/.claude-isolated"
mkdir -p "$ISOLATED_CLAUDE"

# Copy only necessary files from main .claude (auth, settings, etc.)
if [ -f "$HOME/.claude/.credentials.json" ]; then
    cp "$HOME/.claude/.credentials.json" "$ISOLATED_CLAUDE/"
fi
if [ -f "$HOME/.claude/settings.json" ]; then
    cp "$HOME/.claude/settings.json" "$ISOLATED_CLAUDE/"
fi
if [ -f "$HOME/.claude/CLAUDE.md" ]; then
    cp "$HOME/.claude/CLAUDE.md" "$ISOLATED_CLAUDE/"
fi
if [ -d "$HOME/.claude/devcontainer" ]; then
    cp -r "$HOME/.claude/devcontainer" "$ISOLATED_CLAUDE/"
fi
if [ -d "$HOME/.claude/hooks" ]; then
    cp -r "$HOME/.claude/hooks" "$ISOLATED_CLAUDE/"
fi
if [ -d "$HOME/.claude/agents" ]; then
    cp -r "$HOME/.claude/agents" "$ISOLATED_CLAUDE/"
fi
if [ -d "$HOME/.claude/plugins" ]; then
    cp -r "$HOME/.claude/plugins" "$ISOLATED_CLAUDE/"
fi
if [ -d "$HOME/.claude/statsig" ]; then
    cp -r "$HOME/.claude/statsig" "$ISOLATED_CLAUDE/"
fi

# Create project-specific directories
PROJECT_NAME=$(echo "$PROJECT_DIR" | sed 's|/|-|g')
echo -e "${YELLOW}Project session name: $PROJECT_NAME${NC}"
mkdir -p "$ISOLATED_CLAUDE/projects/$PROJECT_NAME"
mkdir -p "$ISOLATED_CLAUDE/todos"
mkdir -p "$ISOLATED_CLAUDE/shell-snapshots"
mkdir -p "$ISOLATED_CLAUDE/sessions"

# Copy existing project sessions if they exist
if [ -d "$HOME/.claude/projects/$PROJECT_NAME" ] && [ "$(ls -A "$HOME/.claude/projects/$PROJECT_NAME")" ]; then
    echo -e "${YELLOW}Loading existing project sessions...${NC}"
    cp -r "$HOME/.claude/projects/$PROJECT_NAME"/. "$ISOLATED_CLAUDE/projects/$PROJECT_NAME/"
else
    echo -e "${YELLOW}No existing sessions found for this project${NC}"
fi

# Claude config info
echo -e "${GREEN}✓ Created isolated Claude configuration${NC}"
echo -e "${GREEN}✓ Project-specific session storage enabled${NC}"

# Check if container image exists
if ! docker image inspect "$CONTAINER_IMAGE" >/dev/null 2>&1; then
    echo -e "${YELLOW}Building Claude Code container...${NC}"
    if [ -f "$HOME/.claude/devcontainer/Dockerfile" ]; then
        docker build -t "$CONTAINER_IMAGE" "$HOME/.claude/devcontainer/"
    else
        echo -e "${RED}Error: Cannot find Dockerfile. Please build claude-code-dev image first.${NC}"
        exit 1
    fi
fi

# Run container
echo -e "${GREEN}Starting Claude container...${NC}"
echo -e "${YELLOW}You're now in a safe environment. The .git folder is not accessible.${NC}"
echo -e "${GREEN}Claude will auto-start with --dangerously-skip-permissions${NC}"
echo

# Build volume mounts
VOLUME_MOUNTS="-v $SAFE_WORKSPACE:/workspace -v $ISOLATED_CLAUDE:/home/node/.claude"
if [ -f "$HOME/.claude.json" ]; then
    VOLUME_MOUNTS="$VOLUME_MOUNTS -v $HOME/.claude.json:/home/node/.claude.json"
fi
# Add temp directory for Claude's internal use (prevents .bak files in workspace)
VOLUME_MOUNTS="$VOLUME_MOUNTS --tmpfs /tmp:rw,exec,size=100m"

# Temporarily disable exit on error for docker run
set +e
docker run -it \
  --rm \
  --name claude-safe-$$ \
  $VOLUME_MOUNTS \
  -w /workspace \
  --entrypoint claude \
  "$CONTAINER_IMAGE" \
  --dangerously-skip-permissions
CONTAINER_EXIT_CODE=$?
set -e

# After container exits, check for changes
echo
echo -e "${YELLOW}=== Reviewing Changes ===${NC}"

# Build diff exclusions
DIFF_EXCLUDES="--exclude='.git' --exclude='.DS_Store' --exclude='.claude-isolated'"
if [ "$FULL_COPY" = false ]; then
    DIFF_EXCLUDES="$DIFF_EXCLUDES --exclude='node_modules' --exclude='.venv' --exclude='__pycache__'"
fi

# Check if there are any changes
if eval diff -qr "$PROJECT_DIR" "$SAFE_WORKSPACE" $DIFF_EXCLUDES >/dev/null 2>&1; then
    echo -e "${GREEN}No changes were made${NC}"
    exit 0
fi

# Show detailed changes  
echo "Changes:"
eval diff -qr "$PROJECT_DIR" "$SAFE_WORKSPACE" $DIFF_EXCLUDES | grep -v "Only in $PROJECT_DIR.*\.git" || true
echo "(Files shown as 'Only in $PROJECT_DIR' were deleted)"

if [[ "$SHOW_DIFF" = true ]] || [[ "$INTERACTIVE" = true ]]; then
    echo
    echo -e "${YELLOW}Review changes with 'diff' command? (y/n)${NC}"
    read -p "> " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        eval diff -ur "$PROJECT_DIR" "$SAFE_WORKSPACE" $DIFF_EXCLUDES || true
    fi
fi

# Sync back changes
if [[ "$INTERACTIVE" = true ]]; then
    echo
    echo -e "${GREEN}Copy changes back to project? (y/n)${NC}"
    read -p "> " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        eval rsync -av --delete $EXCLUDES --exclude='.claude-isolated' \
          "$SAFE_WORKSPACE/" "$PROJECT_DIR/"
        echo -e "${GREEN}✓ Changes applied to project (including deletions)${NC}"
    else
        echo -e "${YELLOW}Changes not applied to project${NC}"
        echo -e "${RED}Warning: Changes will be lost on exit!${NC}"
        echo "To apply changes, rerun with --interactive and choose 'y'"
        exit 1
    fi
else
    echo
    echo -e "${GREEN}Automatically copying changes back to project...${NC}"
    eval rsync -av --delete $EXCLUDES --exclude='.claude-isolated' \
      "$SAFE_WORKSPACE/" "$PROJECT_DIR/"
    echo -e "${GREEN}✓ Changes applied to project (including deletions)${NC}"
fi